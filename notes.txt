Git Commit in details

git log --oneline

git add outline.txt
git commit —amend

git branch -> shows list of branch
git branch <name> - to make a new branch based upon the current HEAD
git switch <branch-name> - to switch to another branch

git commit -a -m “<message>”

git switch -c <branch-name> -> create and switch to this branch

git branch -D <branch-name> -> forcefully delete branch

git branch -m <NEW-branch-name> #switch to the branch you want to rename

git merge 

git diff 
# Compares Staging Area and Working Directory
# Without additional options, git diff lists all the changes
in our working directory that are NOT staged for the next commit
git diff HEAD
# Compares between the head and working directory
# git diff HEAD lists all changes in the working tree since your last commit

git diff --staged or --cached
# will list the changes between staging area and our last commit

git diff HEAD [filename]
git diff --staged [filename]
# sample: git diff --staged numbers.txt

git diff branch1..branch2
# sample: git diff main..odd-number

git diff commit1..commit2

git diff HEAD HEAD~1

git stash
git stash pop - to remove the most recenly stashed changes in your stash and re-apply them to your working copy

git stash list
git stash apply stash@{2}
git stash drop stash@{2}
git stash clear

# Undoing changes
git checkout commit <commit-hash>
git checkout ab4ad69
git checkout HEAD~1
git switch -

# Discarding changes

git checkoout HEAD cat.txt / to discard any changes in that file, reverting back to the HEAD
another option: git checkout -- <filename>

# Unmodify
git restore <file-name> - To restore the file to the contents in the HEAD

git restore --source HEAD~1 home.html - will restore the contents of home.html to its state from the commit prior to HEAD. You can also use a particular commit hash as the source.

## Unstaging Files with restore
git restore --staged <file-name>

# Undoing Commits with Git Reset 
git reset <commit-hash> - will reset the repo back to a specific commit. The commits are gone

git reset --hard <commit>
sample, git reset --hard HEAD~1 will delete the last commit and associated changes.

# Git Revert
git revert <commit-hash>
similar to git reset
git reset actually moves the branch pointer backwards, eliminating commits

git revert instead creates a brand new commit which reverses/undos the changes from a commit. Because it results in a new commit, you will be prompted to enter a commit message.

# Github

Option 1: Existing Repo

If you already have an existing repo locally that you want to get on Github
* Create a new repo on Github
* Connect your local repo (add a remote)
* Push up your changes to Github

Adding A New Remote
- A remote is really two things: a URL and a label. 
To add a new remote, we need to provide both to Git.
> git remote add <name> <url>
> git remote add origin https://github.com/blah/repo.git

Other commands

git remote rename <old> <new>
git remote remove <name>

Option 2: Start From Scratch

If you haven't begun work on your local repo, you can..
* Create a brand new repo on Github
* Clone it down to your machine 
* Do some work locally
* Push up your changes to Github

Pushing
git push <remote> <branch>
git push origin main

git checkout origin/master
git switch <origin/branch>
git fetch <remote> command fetches branches and history from a specific remote repository. It only updates remote tracking branches

git fetch origin would fetch all changes from the origin remote repository

git fetch <remote> <branch>

git pull <remote> <branch>

sample: git pull origin master - would fetch the latest information from the origin's master branch and merge those changes into our current branch